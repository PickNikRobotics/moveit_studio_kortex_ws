<?xml version="1.0"?>

<robot name="gen3" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Arguments for Kinova -->
  <xacro:arg name="arm" default="gen3" />
  <xacro:arg name="dof" default="7" />
  <xacro:arg name="vision" default="false" />
  <xacro:arg name="robot_ip" default="yyy.yyy.yyy.yyy" />
  <xacro:arg name="gripper" default="" />
  <xacro:arg name="username" default="admin" />
  <xacro:arg name="password" default="admin" />
  <xacro:arg name="port" default="10000" />
  <xacro:arg name="port_realtime" default="10001" />
  <xacro:arg name="session_inactivity_timeout_ms" default="60000" />
  <xacro:arg name="connection_inactivity_timeout_ms" default="2000" />
  <xacro:arg name="use_internal_bus_gripper_comm" default="true" />
  <xacro:arg name="prefix" default="" />
  <xacro:arg name="use_fake_hardware" default="false" />
  <xacro:arg name="fake_sensor_commands" default="false" />
  <xacro:arg name="wrist_realsense" default="true" />
  <xacro:arg name="gazebo_renderer" default="ogre"/>

  <!-- Import macros for main hardware components -->
  <xacro:include filename="$(find kortex_description)/robots/kortex_robot.xacro" />
  <xacro:include filename="$(find picknik_accessories)/descriptions/sensors/realsense_d415.urdf.xacro" />
  <xacro:include filename="$(find picknik_accessories)/descriptions/sensors/realsense_d435.urdf.xacro" />

  <!-- Import environment macros -->
  <xacro:include filename="$(find picknik_accessories)/descriptions/geometry/cube.urdf.xacro" />

  <!-- World is centered under base_link of the robot, on the ground -->
  <link name="world" />

  <!-- Load the robot -->
  <xacro:load_robot
    parent="world"
    arm="$(arg arm)"
    gripper="$(arg gripper)"
    dof="$(arg dof)"
    vision="$(arg vision)"
    robot_ip="$(arg robot_ip)"
    username="$(arg username)"
    password="$(arg password)"
    port="$(arg port)"
    port_realtime="$(arg port_realtime)"
    session_inactivity_timeout_ms="$(arg session_inactivity_timeout_ms)"
    connection_inactivity_timeout_ms="$(arg connection_inactivity_timeout_ms)"
    use_internal_bus_gripper_comm="$(arg use_internal_bus_gripper_comm)"
    prefix="$(arg prefix)"
    use_fake_hardware="$(arg use_fake_hardware)"
    fake_sensor_commands="$(arg fake_sensor_commands)">
    <origin xyz="0 0 0" rpy="0 0 0" />
  </xacro:load_robot>

  <!-- Environment -->
  <xacro:cube link_name="table" connected_to="world" length="2.00" width="2.00" height="0.25" alpha="0.3">
    <origin xyz="0 0 ${-0.25/2}" rpy="0 0 0" />
  </xacro:cube>

  <!-- wrist realsense -->
  <xacro:if value="$(arg wrist_realsense)">
    <link name="wrist_camera_link" />

    <joint name="wrist_camera_joint" type="fixed">
      <parent link="$(arg prefix)bracelet_link" />
      <child link="wrist_camera_link" />
      <origin xyz="0 -0.06841 -0.05044" rpy="0 ${3.14 / 180.0 * 100} -1.5708" />
    </joint>

    <xacro:realsense_d415 parent="wrist_camera_link" name="wrist_mounted_camera">
      <origin xyz="0 0 0" rpy="0 0 0" />
    </xacro:realsense_d415>

    <!-- Bracket -->
    <link name="wrist_camera_link_visual">
      <inertial>
        <origin xyz="0.000281 0.011402 -0.029798" rpy="0 0 0" />
        <mass value="0.5" />
        <inertia ixx="0.000587" ixy="3E-06" ixz="3E-06" iyy="0.000369" iyz="-0.000118" izz="0.000609" />
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://picknik_accessories/descriptions/brackets/kinova_realsense_camera_adapter/realsense_bracket_for_kinova.dae" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://picknik_accessories/descriptions/brackets/kinova_realsense_camera_adapter/realsense_bracket_for_kinova.dae" />
        </geometry>
      </collision>
    </link>
    <joint name="$(arg prefix)wrist_camera_link_visual_joint" type="fixed">
      <origin xyz="0 0 0.0" rpy="0 0 0" />
      <parent link="$(arg prefix)bracelet_link" />
      <child link="$(arg prefix)wrist_camera_link_visual" />
    </joint>

    <!-- Moveit Studio requires a link name called manual_grasp_link to perform quick tasks such as inspect surface -->
    <!-- we add this link here and make it coincident with the tool_frame but rotate it to put the camera normal to the surface -->
    <link name="manual_grasp_link" />

    <joint name="manual_grasp_joint" type="fixed">
      <parent link="$(arg prefix)tool_frame" />
      <child link="manual_grasp_link" />
      <origin xyz="0 0 0" rpy="${3.14 / 180.0 * 10} 0 0" />
    </joint>
  </xacro:if>

  <!-- Visual aids for grasping -->
  <link name="finger_tip_closed_point">
    <visual>
      <geometry>
        <sphere radius="0.007" />
      </geometry>
      <material name="">
        <color rgba="0 1.0 0 0.7" />
      </material>
    </visual>
  </link>

  <joint name="finger_tip_closed_point_joint" type="fixed">
    <parent link="robotiq_arg2f_base_link" />
    <child link="finger_tip_closed_point" />
    <origin xyz="0 0 0.16" rpy="0 0 0" />
  </joint>

  <!-- Camera External -->
  <link name="external_camera_link" />
  <joint name="external_camera_joint" type="fixed">
    <parent link="world" />
    <child link="external_camera_link" />
    <origin xyz="-0.3 0.3 1.0" rpy="0.0 0.4 0" />
  </joint>

  <xacro:realsense_d435 parent="external_camera_link" name="scene_camera" visible="false">
    <origin xyz="0 0 0" rpy="0 0 0" />
  </xacro:realsense_d435>

  <!-- Ignition Gazebo Plugins -->
  <gazebo>
    <plugin filename="ign_ros2_control-system" name="ign_ros2_control::IgnitionROS2ControlPlugin">
      <parameters>$(find picknik_kinova_gen3_sim_config)/config/control/picknik_kinova_gen3.ros2_control.yaml</parameters>
      <ros>
        <remapping>/streaming_controller/commands:=/robot_controllers/commands</remapping>
        <remapping>/joint_trajectory_controller/joint_trajectory:=/robot_controllers/joint_trajectory</remapping>
      </ros>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin filename="libignition-gazebo-sensors-system.so" name="ignition::gazebo::systems::Sensors">
      <render_engine>$(arg gazebo_renderer)</render_engine>
    </plugin>
  </gazebo>

</robot>
